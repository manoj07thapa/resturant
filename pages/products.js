import { Fragment } from 'react';
import ProductFilters from '../components/products/ProductFilters';
import ProductCard from '../components/products/ProductCard';
import dbConnect from '../utils/dbConnect';
import { getPaginatedProducts } from '../dbQuery/getPaginatedProducts';
import { getCategories } from '../dbQuery/getCategories';
import { useState } from 'react';
import deepEqual from 'fast-deep-equal';
import useSwr from 'swr';
import { stringify } from 'querystring';
import { useRouter } from 'next/router';
import Pagination from '../components/products/Pagination';
import Head from 'next/head';
import { CategoryModel } from '../interfaces/Category';
import { ProductModel } from '../interfaces/ProductModel';
import { GetServerSideProps } from 'next';
import { DotLoader } from 'react-spinners';
import Footer from '../components/footer/Footer';

// interface ProductProps {
// 	products?: ProductModel[] | undefined;
// 	categories: CategoryModel[];
// 	totalPages?: number | undefined;
// }

export default function Products({ products, categories, totalPages }) {
	const { query } = useRouter();

	const [ serverQuery ] = useState(query);

	const { data } = useSwr('/api/products?' + stringify(query), {
		dedupingInterval: 60000,
		initialData: deepEqual(query, serverQuery) ? { products, totalPages } : undefined
	});

	if (!data || !products) {
		return (
			<div className="flex items-center justify-center">
				<DotLoader color="#2a9d8f" />
			</div>
		);
	}

	return (
		<Fragment>
			<Head>
				<title>Dishes</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="xl:flex xl:h-screen xl:overflow-y-hidden ">
				<ProductFilters categories={categories} />
				{/* <TestFilter /> */}

				<div className="lg:p-12 xl:flex-1 ">
					<div className=" ">
						<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3  gap-x-7 gap-y-20 ">
							{(data.products || [])
								.map((product) => <ProductCard product={product} key={product._id} />)}
						</div>
					</div>
					<div className="m-14">
						<Pagination totalPages={data.totalPages} />
					</div>
				</div>
			</div>
			<Footer />
		</Fragment>
	);
}

export const getServerSideProps = async (ctx) => {
	await dbConnect();

	const [ pagination, categories ] = await Promise.all([ getPaginatedProducts(ctx.query), getCategories() ]);
	const ssProducts = JSON.parse(JSON.stringify(pagination.products));

	return {
		props: {
			products: ssProducts,
			totalPages: pagination.totalPages,
			categories
		}
	};
};
