import { Fragment } from 'react';
import TestFilters from '../components/products/TestFilters';
import ProductCard from '../components/products/ProductCard';
import dbConnect from '../utils/dbConnect';
import { getPaginatedProducts } from '../dbQuery/getPaginatedProducts';
import { getCategories } from '../dbQuery/getCategories';
import { useState } from 'react';
import deepEqual from 'fast-deep-equal';
import useSwr from 'swr';
import { stringify } from 'querystring';
import { useRouter } from 'next/router';
import Pagination from '../components/products/Pagination';
import Head from 'next/head';
import { CategoryModel } from "../interfaces/Category";
import { DishModel } from "../interfaces/Dish";
import { GetServerSideProps } from 'next';

interface ProductProps {
	products?: DishModel[] | undefined;
	categories: CategoryModel[];
	totalPages?: number | undefined;
}

export default function Products({ products, categories, totalPages }: ProductProps) {
	const { query } = useRouter();

	const [serverQuery] = useState(query);

	const { data } = useSwr('/api/products?' + stringify(query), {
		dedupingInterval: 60000,
		initialData: deepEqual(query, serverQuery) ? { products, totalPages } : undefined
	});

	return (
		<Fragment>
			<Head>
				<title>Dishes</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="flex">
				<TestFilters categories={categories} />

				<div>
					<div>
						{(data?.products || []).map((product) => (
							<ProductCard product={product} key={product._id} />
						))}
					</div>
					<div className="m-14">
						<Pagination totalPages={data?.totalPages} />
					</div>
				</div>
			</div>
		</Fragment>
	);
}

export const getServerSideProps: GetServerSideProps<ProductProps> = async (ctx) => {
	await dbConnect();

	const [pagination, categories] = await Promise.all([getPaginatedProducts(ctx.query), getCategories()]);
	const ssProducts = JSON.parse(JSON.stringify(pagination.products));


	return {
		props: {
			products: ssProducts,
			totalPages: pagination.totalPages,
			categories
		}
	};
};
